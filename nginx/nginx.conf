user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # GZIP 압축 설정
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # 보안 헤더 설정 (Day 16 entry.server.tsx 설정과 중복될 수 있으나, Nginx에서 추가하는 것이 더 안전)
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy strict-origin-when-cross-origin always;
    # Content-Security-Policy는 애플리케이션 특성에 맞게 더 상세히 설정 필요
    # add_header Content-Security-Policy "default-src 'self'; ..." always;

    # 업스트림 서버 설정 (Docker Compose 서비스 이름 사용)
    upstream app_servers {
        # server app:3000; # Day 17 docker-compose.yml의 app 서비스
        # 로드 밸런싱 필요 시 여러 서버 추가 가능
        server host.docker.internal:3000; # Docker Desktop 외부 접근 시 (개발 환경)
        # server 172.17.0.1:3000; # Docker 브릿지 네트워크 IP (환경 따라 다름)
    }

    # HTTPS 서버 설정
    server {
        listen 443 ssl http2;
        # server_name your-domain.com; # 실제 도메인으로 변경
        server_name ykmake.com; # 예시 도메인

        # SSL 인증서 경로 (certbot 볼륨 마운트 경로와 일치)
        ssl_certificate /etc/letsencrypt/live/ykmake.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/ykmake.com/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf; # 권장 SSL 파라미터 포함 (Certbot 생성)
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # 권장 DH 파라미터 포함 (Certbot 생성)

        # ssl_session_timeout 1d;
        # ssl_session_cache shared:SSL:50m;
        # ssl_session_tickets off;
        # ssl_protocols TLSv1.2 TLSv1.3; # options-ssl-nginx.conf 에 포함됨
        # ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:...; # options-ssl-nginx.conf 에 포함됨
        # ssl_prefer_server_ciphers off;

        # HSTS 설정 (preload 등록 시 주의)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        # 정적 파일 직접 서빙 (선택 사항, Remix 앱에서 처리 가능)
        # location /static {
        #     alias /app/public; # 실제 public 경로 확인 필요
        #     expires 30d;
        #     add_header Cache-Control "public, no-transform";
        # }

        # 프록시 설정
        location / {
            proxy_pass http://app_servers; # 업스트림 이름 사용
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host; # 원래 호스트 헤더 전달
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # WebSocket 지원 (Remix 기본 지원)
            # proxy_set_header Upgrade $http_upgrade;
            # proxy_set_header Connection "upgrade";
        }

        # Certbot 웹 루트 경로 설정 (.well-known/acme-challenge)
        location ~ /.well-known/acme-challenge/ {
            allow all;
            root /var/www/certbot; # certbot 서비스 볼륨과 동일
        }
    }

    # HTTP를 HTTPS로 리다이렉트
    server {
        listen 80;
        # server_name your-domain.com; # 실제 도메인으로 변경
        server_name ykmake.com;

        # Certbot 챌린지 요청은 리다이렉트하지 않음
        location ~ /.well-known/acme-challenge/ {
            allow all;
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri; # $host 사용 권장
        }
    }
}