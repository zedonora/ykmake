version: '3.8'

services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - SESSION_SECRET=${SESSION_SECRET}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-ykmake}
      - REDIS_URL=redis://cache:6379
      - MINIO_ENDPOINT=http://minio:9000
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${MINIO_BUCKET_NAME:-ykmake}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
      - KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SLACK_TOKEN=${SLACK_TOKEN}
      - SLACK_CHANNEL=${SLACK_CHANNEL}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_started
      minio:
        condition: service_healthy
      createbuckets:
        condition: service_completed_successfully
    volumes:
      - ./logs:/app/logs

  db:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-ykmake}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-ykmake}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped

  cache:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  createbuckets:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO...';
      sleep 5;
      /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin};
      echo 'Creating bucket ${MINIO_BUCKET_NAME:-ykmake}...';
      /usr/bin/mc mb myminio/${MINIO_BUCKET_NAME:-ykmake} || echo 'Bucket already exists.';
      echo 'Setting bucket policy...';
      /usr/bin/mc policy set public myminio/${MINIO_BUCKET_NAME:-ykmake};
      echo 'MinIO initialization complete.';
      exit 0;
      "

  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped
    depends_on:
      - app

  grafana:
    image: grafana/grafana-oss:10.1.5
    container_name: grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    restart: unless-stopped
    depends_on:
      - prometheus
  
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro # 읽기 전용 마운트
      - ./certbot/conf:/etc/letsencrypt # certbot과 공유 (인증서)
      - ./certbot/www:/var/www/certbot # certbot과 공유 (웹 루트 챌린지)
      - ./logs/nginx:/var/log/nginx # Nginx 로그
    depends_on:
      - app # 앱 서버가 실행된 후 시작
    restart: unless-stopped

  certbot:
    image: certbot/certbot:v2.8.0 # 버전 명시 권장
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./logs/letsencrypt:/var/log/letsencrypt # Let's Encrypt 로그
    # 처음 실행 시 인증서 발급 명령어 (도메인, 이메일 수정 필요)
    # entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;" # 자동 갱신 (주석 처리)
    command: certonly --webroot -w /var/www/certbot --email your-email@example.com --agree-tos --no-eff-email -d ykmake.com
    # 주의: 위 command는 첫 실행 시 인증서 발급용입니다.
    # 발급 성공 후에는 아래 entrypoint로 변경하여 자동 갱신 모드로 실행해야 합니다.
    # 또는 cron job 등을 이용해 외부에서 renew 명령을 주기적으로 실행합니다.
    # entrypoint: ["/bin/sh", "-c", "sleep infinity"]
    
volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:
